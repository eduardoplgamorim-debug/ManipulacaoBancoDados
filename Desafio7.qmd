---
title: "Desafio 7"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
library(vroom)
```

```{r}
library(RSQLite)
library(tidyverse)
library(dbplyr)

if(!"discoCopy.db" %in% list.files(".")){
file.copy("disco.db","discoCopy.db")}
```

```{r}
dir.create("../dados", showWarnings = FALSE)
file.copy("disco.db", "../dados/discoCopy.db", overwrite = TRUE)
```

```{r}
db <- dbConnect(SQLite(), "../dados/discoCopy.db")
```

```{r}
print(dbListTables(db))
```

```{r}
dbExecute(db, "CREATE TABLE instruments
               (AlbumId INTEGER,
                TrackId INTEGER,
                ElectricGuitar INTEGER,
                Singer INTEGER,
                Trumpet INTEGER)")
```

```{r}
print(dbListFields(db, 'instruments'))
```

```{r}
dbExecute(db,
"DROP TABLE instruments")
```

```{r}
aname = "Gilberto Gil"
sql = paste0("SELECT ArtistId FROM artists "
,
"WHERE Name = '"
, aname,
"'")
aId = dbGetQuery(db, sql)
sql = paste('SELECT Title FROM albums'
,
'WHERE ArtistId ='
, aId)
dbGetQuery(db, sql)

```

```{r}
aname <- "Gilberto Gil'; DROP TABLE 'albums"
```

```{r}
sql = paste("SELECT ArtistId FROM artists"
,
"WHERE Name = ?")
query <- dbSendQuery(db, sql)
dbBind(query, list("Gilberto Gil"))
aId <- dbFetch(query)
dbClearResult(query)

sql = paste('SELECT Title FROM albums'
,
'WHERE ArtistId ='
, aId)
dbGetQuery(db, sql)
```

```{r}
dbExecute(db, "CREATE TABLE instruments
               (AlbumId INTEGER,
                TrackId INTEGER,
                ElectricGuitar INTEGER,
                Singer INTEGER,
                Trumpet INTEGER)")
```

```{r}
dbListFields(db,'instruments')
```

```{r}
sql = paste('SELECT TrackId, Name FROM tracks'
,
'WHERE AlbumId = 85')
dbGetQuery(db, sql) %>% head
```

```{r}
dbExecute(db,
"INSERT INTO instruments
VALUES ('85'
,
'1075'
, 0, 1, 0),
('85'
,
'1078'
, 0, 1, 0); ")
```

```{r}
dbGetQuery(db,
"SELECT * FROM instruments")
```

```{r}
dbWriteTable(db,
"mtcars"
, mtcars)
dbListTables(db)
```

```{r}
dbGetQuery(db,
"SELECT * FROM mtcars") %>% head(3)
```

```{r}
theAvgCar <- mtcars %>%
summarise_all(function(x) round(mean(x), 2))
theAvgCar
```

```{r}
dbWriteTable(db,
"mtcars"
, theAvgCar, append = TRUE)
dbGetQuery(db,
"SELECT * FROM mtcars") %>% tail(3)
```

```{r}
dbWriteTable(db,
"mtcars"
, mtcars, overwrite = TRUE)
dbGetQuery(db,
"SELECT * FROM mtcars") %>% tail(3)
```

```{r}
res <- dbSendQuery(db,
"SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
```

```{r}
dbClearResult(res)
```

```{r}
dbDisconnect(db)
if("discoCopy.db" %in% list.files("../dados/")){
file.remove("../dados/discoCopy.db")
}
```

```{r}
airports <- read_csv("airports.csv"
, col_types = "cccccdd")
airlines <- read_csv("airlines.csv"
, col_types = "cc")
air <- dbConnect(SQLite(), dbname="../dados/air.db")
dbWriteTable(air, name = "airports"
, airports)
dbWriteTable(air, name = "airlines"
, airlines)
dbListTables(air)
```

```{r}
dbDisconnect(air)

if ("air.db" %in% list.files("../dados/")) {
  file.remove("../dados/air.db")
}
```

```{r}
library(RSQLite)
library(tidyverse)
library(dbplyr)
db <- dbConnect(SQLite(),
"disco.db") 

tracks <- tbl(db,
"tracks") 
tracks %>% head(3)
```

```{r}
meanTracks <- tracks %>%
group_by(AlbumId) %>%
summarise(AvLen = mean(Milliseconds, na.rm = TRUE),
AvCost = mean(UnitPrice, na.rm = TRUE))
meanTracks
```

```{r}
meanTracks %>% show_query()
```

```{r}
mT <- meanTracks %>% collect()
mT
```

```{r}
dbDisconnect(db)
```
